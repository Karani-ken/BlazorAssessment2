@using BlazorAssessment2.Models;
@using BlazorAssessment2.Services.IServices;
@inject IUserInterface userInterface;
<nav class="navbar navbar-expand-lg text-white bg-primary">
    <div class="container-fluid">
        <a class="navbar-brand text-white" href="#">Twitter</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll" aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarScroll">
            <ul class="navbar-nav me-auto my-2 my-lg-0 navbar-nav-scroll" style="--bs-scroll-height: 100px;">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="">Home</a>
                </li>
                <li class="nav-item dropdown">
                  
                   <select @bind="selectedUserId" class="form-control">
                        <option class="nav-link dropdown-toggle text-white" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Switch User
                        </option>
                        @foreach (var user in Users)
                        {
                            <option value="@user.id" class="nav-link dropdown-toggle text-black" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @user.name
                            </option>
                        
                        }
                </select>                            
                        
                    
                </li>
              
            </ul>
            <form class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
        </div>
    </div>
</nav>

@code {
    public List<User> Users = new List<User>();

    public int selectedUserId;
    [Parameter]
    public EventCallback<int> GetUser{ get; set; }
    private async Task HandleUserSelect()
    {
        await GetUser.InvokeAsync(selectedUserId);
    }
    protected override async Task OnInitializedAsync()
    {

        Users = await userInterface.GetUsers();

    }
}
